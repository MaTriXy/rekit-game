package edu.kit.informatik.ragnarok.gui;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

import edu.kit.informatik.ragnarok.logic.GameModel;

public class GameView {
	/**
	 * Reference to the model, that holds all information that are required for rendering 
	 */
	private GameModel model;
	
	/**
	 * Reference to the window, where the view renders everything we need
	 */
	private MainFrame window;
   
   
   public GameView() {
	   
	   // Create window
	   Display display = new Display();
	   Shell shell = new Shell(display);
	   shell.setText("Project Ragnarok");
	   
	   // Create and position a canvas
	   Canvas canvas = new Canvas(shell, SWT.NONE);
	   canvas.setSize(450, 300);
	   canvas.setLocation(0, 0);
	   
	   // Open Shell
	   shell.open();
	   shell.setSize(450, 300);
	   
	   // Create Graphic context
	   GC gc = new GC(canvas);
	   gc.drawRectangle(10, 10, 40, 45);
	   gc.drawOval(65, 10, 30, 35);
	   gc.drawLine(130, 10, 90, 80);
	   gc.drawPolygon(new int[] { 20, 70, 45, 90, 70, 70 });
	   gc.drawPolyline(new int[] { 10, 120, 70, 100, 100, 130, 130, 75 });
	   gc.dispose();

	   
	   /* 
	   // Wait for window to be closed
	   while (!shell.isDisposed()) {
		   if (!display.readAndDispatch()) {
			   display.sleep();
		   }
	   }
	   display.dispose();
	   */
   }
   
   public void initCanvas() {
	   
   }
   
   public void setModel(GameModel value) {
      this.model = value;
   }
   
   public GameModel getModel() {
      return this.model;
   }
   
   /**
    * <pre>
    *           1..1     1..1
    * GameView ------------------------> Canvas
    *           gameView        &gt;       canvas
    * </pre>
    */
   private Canvas canvas;
   
   public void setCanvas(Canvas value) {
      this.canvas = value;
   }
   
   public Canvas getCanvas() {
      return this.canvas;
   }
   
   public void renderLoop() {
      // TODO implement this operation
      throw new UnsupportedOperationException("not implemented");
   }
   
   }
